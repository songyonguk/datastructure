//////////////////////////////////////////
//Lab4
//Name: 송용욱
//ID : 20170711
//////////////////////////////////////////
#include <stdio.h>
#include <iostream>
#include <fstream>
#include <string>
#include<stdlib.h>
using namespace std;

typedef struct {
    int row;
    int col;
    int value;
}matrix;

void transpose_1(matrix a[], matrix b[]) {
    int i, j, currentB;
    b[0].row = a[0].col;
    b[0].col = a[0].row;
    b[0].value = a[0].value;

    if (a[0].value > 0) {
        currentB = 1;
        for (i = 0; i < a[0].col; i++)
            for (j = 1; j <= a[0].value; j++)
                if (a[j].col == i) {
                    b[currentB].row = a[j].col;
                    b[currentB].col = a[j].row;
                    b[currentB].value = a[j].value;
                    currentB++;
                }
    }
}

void fastTranspose(matrix* a, matrix* b) {
    b[0].row = a[0].col;
    b[0].col = a[0].row;
    b[0].value = a[0].value;

    int rowTerms[10];
    int startingPosition[10];

    for(int i = 0; i < a[0].col; i++) {
        rowTerms[i] = 0;
    }
    for(int i = 1; i <= a[0].value; i++) {
        rowTerms[a[i].col]++;
    }

    startingPosition[0] = 1;

    for(int i = 1; i <= a[0].col; i++) {
        startingPosition[i] = startingPosition[i-1] + rowTerms[i-1];
    }

    for(int i = 1; i <= a[0].value; i++) {
        int j = startingPosition[a[i].col]++;
        b[j].row = a[i].col;
        b[j].col = a[i].row;
        b[j].value = a[i].value;
    }
}

int main(){

    char buffer[80]; ifstream infile;
    int myArray[6][6];
    infile.open("lab4.txt", ios::in);
    if (infile.fail()) { cout << "error" << endl; exit(1); }

    else {
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 6; j++) {
                infile >> myArray[i][j];

            }}}
            for (int i = 0; i < 6; i++) {
                for (int j = 0; j < 6; j++) {
cout << " "<< myArray[i][j] << " ";
    }
    cout<<"\n";
}
    infile.close();

    int s =0;
    int B[12][3];

    for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 6; j++) {
          if(myArray[i][j] != 0){
            B[s][0] = i;
            B[s][1] = j;
            B[s][2] = myArray[i][j];
            s++;
}
        }}

        for (int i = 0; i < s; i++) {
		for (int j = 0; j < 3; j++) {
			cout << B[i][j] << " ";
		}
		cout << "\n";
	}
  int temp = 0;


  for (int i = 1; i < s; i++) {
		//열과 행 바꾸기
			temp = B[i][0];
			B[i][0] = B[i][1];
			B[i][1] = temp;
		//행과 열에 해당하는 값을 A에 저장
	}
	//Transpose Matrix 출력

for (int i = 0; i < 8; i++){
  if(B[i][0]<B[i+1][0]){
    cout<<B[i+1][0]<<" "<<B[i+1][1]<<" "<<B[i+1][2];
    cout<<B[i][0]<<" "<<B[i][1]<<" "<<B[i][2];
  }
  else if(B[i][0]=B[i+1][0]){
    if(B[i][1]<B[i+1][1]){
      cout<<B[i+1][0]<<" "<<B[i+1][1]<<" "<<B[i+1][2];
      cout<<B[i][0]<<" "<<B[i][1]<<" "<<B[i][2];
    }
    else{
      cout<<B[i][0]<<" "<<B[i][1]<<" "<<B[i][2];
      cout<<B[i+1][0]<<" "<<B[i+1][1]<<" "<<B[i+1][2];

    }
  }
  else{
    cout<<B[i][0]<<" "<<B[i][1]<<" "<<B[i][2];
    cout<<B[i+1][0]<<" "<<B[i+1][1]<<" "<<B[i+1][2];
  }
}




/*


int arrayC[8] = {{B[0][0],B[1][0],B[2][0]},{B[0][1],B[1][1],B[2][1]},{B[0][2],B[1][2],B[2][2]},{B[0][3],B[1][3],B[2][3]},{B[0][4],B[1][4],B[2][4]},{B[0][5],B[1][5],B[2][5]},{B[0][6],B[1][6],B[2][6]},{B[0][7],B[1][7],B[2][7]}};



  int i, j, currentB;
  b[0].row = a[0].col;
  b[0].col = a[0].row;
  b[0].value = a[0].value;

  if (a[0].value > 0) {
      currentB = 1;
      for (i = 0; i < B[0][i]; i++)
          for (j = 1; j <= B[0][j]; j++)
              if (a[j].col == i) {
                  b[currentB].row = a[j].col;
                  b[currentB].col = a[j].row;
                  b[currentB].value = a[j].value;
                  currentB++;
              }
  }

/*  /*
int arrayD;
int arrayC[10][3] = {{B[0][0],B[1][0],B[2][0]},{B[0][1],B[1][1],B[2][1]},{B[0][2],B[1][2],B[2][2]},{B[0][3],B[1][3],B[2][3]},{B[0][4],B[1][4],B[2][4]},{B[0][5],B[1][5],B[2][5]},{B[0][6],B[1][6],B[2][6]},{B[0][7],B[1][7],B[2][7]}};
  cout<<transpose_1(arrayC, arrayD);


*/
/*
  int c =0;
  int C[12][3];

  for (int i = 0; i < 6; i++) {
      for (int j = 0; j < 6; j++) {
        if(myArray[j][i] != 0){
          C[c][0] = j;
          C[c][1] = i;
          C[c][2] = myArray[j][i];
          s++;
}
      }}
      for (int i = 0; i < c; i++) {
  for (int j = 0; j < 3; j++) {
    cout << C[i][j] << " ";
  }
  cout << "\n";
}

int i, j, currentB;
  b[0].row = a[0].col;
  b[0].col = a[0].row;
  b[0].value = a[0].value;

  if (a[0].value > 0) {
      currentB = 1;
      for (i = 0; i < a[0].col; i++)
          for (j = 1; j <= a[0].value; j++)
              if (a[j].col == i) {
                  b[currentB].row = a[j].col;
                  b[currentB].col = a[j].row;
                  b[currentB].value = a[j].calue;
                  currentB++;
              }
  }
}
/*
  int temp = 0;
  int row = 0;
  int col = 0;
  int C[6][6];

  for(int i=1; i<s; i++){
    temp = myArray[i][0];
    myArray[i][0] = myArray[i][1];
    myArray[i][1] = temp;

    row = myArray[i][0];
    col = myArray[i][1];
    C[row][col] = myArray[i][2];
    myArray[i][2] = 0;
  }

  for (int i = 0; i < 6; i++) {
		for (int j = 0; j < 6; j++) {
			cout << C[i][j] << " ";
		}
		cout << "\n";
	}


*/












    return 0;



}
/*
void rowmajor() {
    for (i = 0; i < row; i++) {
        for (j = 0; j < col; j++)
    }
}

void transpose_1(SMarray a[], SMarray b[]) {
    int i, j, currentB;
    b[0].row = a[0].col;
    b[0].col = a[0].row;
    b[0].value = a[0].value;

    if (a[0].value > 0) {
        currentB = 1;
        for (i = 0; i < a[0].col; i++)
            for (j = 1; j <= a[0].value; j++)
                if (a[j].col == i) {
                    b[currentB].row = a[j].col;
                    b[currentB].col = a[j].row;
                    b[currentB].value = a[j].calue;
                    currentB++;
                }
    }
}

void fast_transpose(term a[], term b[]) {
    int row_terms[MAX_COL], starting_pos[MAX_COL];
    int i, j, num_cols = a[0].col, num_terms = a[0].value;

    b[0].row = num_cols;
    b[0].col = a[0].row;
    b[0].value = num_terms;

    if (num_terms > 0) {
        for (i = 0; i < num_cols; i++) {
            row_terms[i] = 0;
        }
        for (i = 1; i <= num_terms; i++) {
            row_terms[a[i].col]++;
        }
        starting_pos = 1;
        for (i = 1; i < num_cols; i++) {
            starting_pos[i] = starting_pos[i - 1] + row_terms[i - 1];
        }
        for (i = 1; i <= num_terms; i++) {
            j = starting_pos[a[i].col]++;
            b[j].row = a[i].col;
            b[j].col = a[i].row;
            b[j].value = a[i].value;
        }
    }
}
*/
